{"version":3,"file":"BDA4BX0d.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/components/ContentDoc.vue"],"sourcesContent":["<script>\nimport { defineComponent, h, useSlots } from \"vue\";\nimport { withTrailingSlash } from \"ufo\";\nimport ContentRenderer from \"./ContentRenderer.vue\";\nimport ContentQuery from \"./ContentQuery.vue\";\nimport { useRuntimeConfig, useRoute, useContentHead } from \"#imports\";\nconst ContentDoc = defineComponent({\n  name: \"ContentDoc\",\n  props: {\n    /**\n     * Renderer props\n     */\n    /**\n     * The tag to use for the renderer element if it is used.\n     * @default 'div'\n     */\n    tag: {\n      type: String,\n      required: false,\n      default: \"div\"\n    },\n    /**\n     * Whether or not to render the excerpt.\n     * @default false\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Query props\n     */\n    /**\n     * The path of the content to load from content source.\n     * @default useRoute().path\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A query builder params object to be passed to <ContentQuery /> component.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Whether or not to map the document data to the `head` property.\n     */\n    head: {\n      type: Boolean,\n      required: false,\n      default: void 0\n    }\n  },\n  /**\n   * Document empty fallback\n   * @slot empty\n   */\n  /**\n   * Document not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const { contentHead } = useRuntimeConfig().public.content;\n    const slots = useSlots();\n    const { tag, excerpt, path, query, head } = ctx;\n    const shouldInjectContentHead = head === void 0 ? contentHead : head;\n    const contentQueryProps = {\n      ...query || {},\n      path: path || query?.path || withTrailingSlash(useRoute().path),\n      find: \"one\"\n    };\n    const emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentDoc>\", slot, data }, null, 2));\n    return h(\n      ContentQuery,\n      contentQueryProps,\n      {\n        // Default slot\n        default: slots?.default ? ({ data, refresh, isPartial }) => {\n          if (shouldInjectContentHead) {\n            useContentHead(data);\n          }\n          return slots.default?.({ doc: data, refresh, isPartial, excerpt, ...this.$attrs });\n        } : ({ data }) => {\n          if (shouldInjectContentHead) {\n            useContentHead(data);\n          }\n          return h(\n            ContentRenderer,\n            { value: data, excerpt, tag, ...this.$attrs },\n            // Forward local `empty` slots to ContentRenderer if it is used.\n            { empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", data) }\n          );\n        },\n        // Empty slot\n        empty: (bindings) => slots?.empty?.(bindings) || h(\"p\", null, \"Document is empty, overwrite this content with #empty slot in <ContentDoc>.\"),\n        // Not Found slot\n        \"not-found\": (bindings) => slots?.[\"not-found\"]?.(bindings) || h(\"p\", null, \"Document not found, overwrite this content with #not-found slot in <ContentDoc>.\")\n      }\n    );\n  }\n});\nexport default ContentDoc;\n</script>\n"],"names":["ContentDoc","defineComponent","ctx","contentHead","useRuntimeConfig","slots","useSlots","tag","excerpt","path","query","head","shouldInjectContentHead","contentQueryProps","withTrailingSlash","useRoute","emptyNode","slot","data","h","ContentQuery","refresh","isPartial","useContentHead","_a","ContentRenderer","bindings"],"mappings":"kRAMA,MAAMA,EAAaC,EAAgB,CACjC,KAAM,aACN,MAAO,CAQL,IAAK,CACH,KAAM,OACN,SAAU,GACV,QAAS,KACV,EAKD,QAAS,CACP,KAAM,QACN,QAAS,EACV,EAQD,KAAM,CACJ,KAAM,OACN,SAAU,GACV,QAAS,MACV,EAID,MAAO,CACL,KAAM,OACN,SAAU,GACV,QAAS,MACV,EAID,KAAM,CACJ,KAAM,QACN,SAAU,GACV,QAAS,MACX,CACD,EASD,OAAOC,EAAK,CACV,KAAM,CAAE,YAAAC,CAAc,EAAEC,EAAgB,EAAG,OAAO,QAC5CC,EAAQC,IACR,CAAE,IAAAC,EAAK,QAAAC,EAAS,KAAAC,EAAM,MAAAC,EAAO,KAAAC,CAAK,EAAIT,EACtCU,EAA0BD,IAAS,OAASR,EAAcQ,EAC1DE,EAAoB,CACxB,GAAGH,GAAS,CAAE,EACd,KAAMD,IAAQC,GAAA,YAAAA,EAAO,OAAQI,EAAkBC,EAAU,EAAC,IAAI,EAC9D,KAAM,OAEFC,EAAY,CAACC,EAAMC,IAASC,EAAE,MAAO,KAAM,KAAK,UAAU,CAAE,QAAS,yCAA0C,KAAAF,EAAM,KAAAC,CAAK,EAAG,KAAM,CAAC,CAAC,EAC3I,OAAOC,EACLC,EACAP,EACA,CAEE,QAASR,GAAA,MAAAA,EAAO,QAAU,CAAC,CAAE,KAAAa,EAAM,QAAAG,EAAS,UAAAC,KAAgB,OAC1D,OAAIV,GACFW,EAAeL,CAAI,GAEdM,EAAAnB,EAAM,UAAN,YAAAmB,EAAA,KAAAnB,EAAgB,CAAE,IAAKa,EAAM,QAAAG,EAAS,UAAAC,EAAW,QAAAd,EAAS,GAAG,KAAK,MAAQ,IAC/E,CAAC,CAAE,KAAAU,MACDN,GACFW,EAAeL,CAAI,EAEdC,EACLM,EACA,CAAE,MAAOP,EAAM,QAAAV,EAAS,IAAAD,EAAK,GAAG,KAAK,MAAQ,EAE7C,CAAE,MAAQmB,GAAarB,GAAA,MAAAA,EAAO,MAAQA,EAAM,MAAMqB,CAAQ,EAAIV,EAAU,UAAWE,CAAI,CAAE,IAI7F,MAAQQ,GAAa,OAAA,QAAAF,EAAAnB,GAAA,YAAAA,EAAO,QAAP,YAAAmB,EAAA,KAAAnB,EAAeqB,KAAaP,EAAE,IAAK,KAAM,6EAA6E,GAE3I,YAAcO,UAAa,QAAAF,EAAAnB,GAAA,YAAAA,EAAQ,eAAR,YAAAmB,EAAA,KAAAnB,EAAuBqB,KAAaP,EAAE,IAAK,KAAM,kFAAkF,EAChK,EAEJ,CACF,CAAC,IACiBnB","x_google_ignoreList":[0]}